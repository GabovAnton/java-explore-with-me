{
	"info": {
		"_postman_id": "c09d7718-2412-49f0-a91d-9c6d631c845d",
		"name": "Test ewm service feature(subscriptions)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23147871"
	},
	"item": [
		{
			"name": "Получение информации о всех подписках пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const friend = await api.addUser(rnd.getUser());",
							"               ",
							"        const user = await api.addUser(rnd.getUser());",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id);",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        event = await api.publishEvent(event.id);",
							"        let notifyByEmail = true;",
							"        const userSubscription = await api.addSubscription(user.id, friend.id);",
							"",
							"        pm.request.removeQueryParams(['users', 'categories']);",
							"",
							"        pm.collectionVariables.set('userId', user.id);",
							"",
							"        pm.collectionVariables.set('response', event);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json()[0];",
							"const resultSize = pm.response.json().length;",
							"",
							"pm.test(\"В ответе должна быть только 1 подписка\", function () {",
							"    pm.expect(resultSize).eq(1);",
							"});",
							"",
							"pm.test(\"Подписка должна содержать поля: id, userId, notifyByEmail, notifyByPortal, subscribeNewEvents, subscribeChangeEvents, subscribeDeleteEvents, subscribedTo\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('notifyByEmail');",
							"pm.expect(target).to.have.property('notifyByPortal');",
							"pm.expect(target).to.have.property('subscribeNewEvents');",
							"pm.expect(target).to.have.property('subscribeChangeEvents');",
							"pm.expect(target).to.have.property('subscribeDeleteEvents');",
							"pm.expect(target).to.have.property('subscribedTo');",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/userSubscription/all",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"userSubscription",
						"all"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации о всех уведомлениях пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const friend = await api.addUser(rnd.getUser());",
							"               ",
							"        const user = await api.addUser(rnd.getUser());",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id);",
							"",
							"        const userSubscription = await api.addSubscription(user.id, friend.id);",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id + \" -> subscription id: \" + userSubscription.id);",
							"",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(friend.id, rnd.getEvent(category.id));",
							"",
							"     const updatedEvent =await api.changeEventPrivate(user.id,event.id);",
							"",
							"        event = await api.publishEvent(event.id);",
							"",
							"        ",
							"",
							"        pm.request.removeQueryParams(['users', 'categories']);",
							"",
							"        pm.collectionVariables.set('userId', user.id);",
							"        pm.collectionVariables.set('friendId', friend.id);",
							"",
							"        pm.collectionVariables.set('response', event);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json()[0];",
							"const resultSize = pm.response.json().length;",
							" var jsonData = pm.response.json();",
							"",
							"pm.test(\"В ответе должно быть 3 уведомления с статусами по порядку: new->change->change\", function () {",
							"    pm.expect(resultSize).eq(3);",
							"    pm.expect(jsonData[0].notificationType).to.equal(\"NEW\");",
							"    pm.expect(jsonData[1].notificationType).to.equal(\"CHANGE\");",
							"    pm.expect(jsonData[2].notificationType).to.equal(\"CHANGE\");",
							"",
							"});",
							"",
							"pm.test(\"Уведомление должно содержать поля: id, userId, notified, subscription, notificationDate, notificationType, notificationMethod, payload\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('notified');",
							"pm.expect(target).to.have.property('subscription');",
							"pm.expect(target).to.have.property('notificationDate');",
							"pm.expect(target).to.have.property('notificationType');",
							"pm.expect(target).to.have.property('notificationMethod');",
							"pm.expect(target).to.have.property('payload');",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/notifications/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"notifications",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "friendId",
							"value": "{{friendId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации об уведомлениях с фильтрацией",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const friend = await api.addUser(rnd.getUser());",
							"               ",
							"        const user = await api.addUser(rnd.getUser());",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id);",
							"",
							"        const userSubscription = await api.addSubscription(user.id, friend.id);",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id + \" -> subscription id: \" + userSubscription.id);",
							"",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(friend.id, rnd.getEvent(category.id));",
							"",
							"     const updatedEvent =await api.changeEventPrivate(user.id,event.id);",
							"",
							"        event = await api.publishEvent(event.id);",
							"",
							"        ",
							"",
							"        pm.request.removeQueryParams(['users', 'categories']);",
							"",
							"        pm.collectionVariables.set('userId', user.id);",
							"        pm.collectionVariables.set('friendId', friend.id);",
							"",
							"        pm.collectionVariables.set('response', event);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json()[0];",
							"const resultSize = pm.response.json().length;",
							" var jsonData = pm.response.json();",
							"",
							"pm.test(\"В ответе должно быть 3 уведомления с статусами по порядку: new->change->change\", function () {",
							"    pm.expect(resultSize).eq(3);",
							"    pm.expect(jsonData[0].notificationType).to.equal(\"NEW\");",
							"    pm.expect(jsonData[1].notificationType).to.equal(\"CHANGE\");",
							"    pm.expect(jsonData[2].notificationType).to.equal(\"CHANGE\");",
							"",
							"});",
							"",
							"pm.test(\"Уведомление должно содержать поля: id, userId, notified, subscription, notificationDate, notificationType, notificationMethod, payload\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('notified');",
							"pm.expect(target).to.have.property('subscription');",
							"pm.expect(target).to.have.property('notificationDate');",
							"pm.expect(target).to.have.property('notificationType');",
							"pm.expect(target).to.have.property('notificationMethod');",
							"pm.expect(target).to.have.property('payload');",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/notifications?rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000&notified=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"notifications"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "notified",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации о всех уведомлениях пользователя после удаления подписки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const friend = await api.addUser(rnd.getUser());",
							"               ",
							"        const user = await api.addUser(rnd.getUser());",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id);",
							"",
							"        const userSubscription = await api.addSubscription(user.id, friend.id);",
							"        console.log(\"user id: \" + user.id + \"-->  friend id:\" + friend.id + \" -> subscription id: \" + userSubscription.id);",
							"",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(friend.id, rnd.getEvent(category.id));",
							"",
							"      const updatedEvent =await api.changeEventPrivate(user.id,event.id);",
							"",
							"        event = await api.publishEvent(event.id);",
							"",
							"        pm.sendRequest(",
							"            {",
							"                url: pm.globals.get('baseUrl') + \"/users/\" + user.id + \"/userSubscription/\" + userSubscription.id, ",
							"                method: 'DELETE'",
							"            },",
							"            function (err, response) {",
							"                if(response.code != 204) {",
							"                    console.warn(\"Ошибка при удалении подписки\");",
							"                } else {",
							"                       console.log(\"subscription id: \" + userSubscription.id + \" deleted\");",
							"                }",
							"            }",
							"        );",
							"",
							"        pm.request.removeQueryParams(['users', 'categories']);",
							"      ",
							"",
							"        pm.collectionVariables.set('userId', user.id);",
							"        pm.collectionVariables.set('friendId', friend.id);",
							"",
							"        pm.collectionVariables.set('response', event);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json()[0];",
							"const resultSize = pm.response.json().length;",
							"",
							"pm.test(\"В ответе должно быть 0 уведомлений\", function () {",
							"    pm.expect(resultSize).eq(0);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/notifications/:friendId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"notifications",
						":friendId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "friendId",
							"value": "{{friendId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					" async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addSubscription(userId, friendId, verbose=null) {",
					"",
					"    return this.post(\"/users/\" + userId + \"/userSubscription/\" + friendId + \"?notifyByEmail=false&notifyByPortal=true&subscribeNewEvents=true&subscribeChangeEvents=true&subscribeDeleteEvents=false\",",
					"         \"Ошибка при добавлении новой подписки: \", verbose);   ",
					"    }",
					" ",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async changeEventPrivate(userId, eventId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId, {title: \"UPDATED TITLE\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"     async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении  delete-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "usersCount",
			"value": "1",
			"type": "string"
		},
		{
			"key": "catid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "mail",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "catname",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "reqid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "friendId",
			"value": ""
		}
	]
}